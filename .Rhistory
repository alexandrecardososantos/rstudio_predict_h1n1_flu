#Set do diretório das bases de dados
setwd("C:\\Users\\HP\\Desktop\\DrivenData\\predict_h1n1_flu")
getwd()
options(scipen = 999)
#Importa variáveis explicativas
training_features <- read.csv(file = 'training_set_features.csv')
dim(training_features)
#View(training_features)
str(training_features)
#Importa variáveis resposta
training_labels <- read.csv(file = 'training_set_labels.csv')
dim(training_labels)
#View(training_labels)
str(training_labels)
library(dplyr)
#Cruza as variáveis resposta com as variáveis explicativas, utilizando o respondent_id como chave
training_features_2<-left_join(training_features,training_labels,by="respondent_id")
dim(training_features_2)
View(training_features_2)
#Avaliar analiticamente concentração de dados faltantes
sapply(training_features_2, function(x) sum(is.na(x)))
#Exploratória
summary(training_features_2) #resumo geral da base
#h1n1_concern
#Considerarei os valores missing como 0 (Not at all concerned)
training_features_2[["h1n1_concern"]][is.na(training_features_2[["h1n1_concern"]])] <- 0
#h1n1_knowledge
#Considerarei os valores missing como 0 (No knowledge)
training_features_2[["h1n1_knowledge"]][is.na(training_features_2[["h1n1_knowledge"]])] <- 0
#behavioral_antiviral_meds
#Considerarei os valores missing como 0 (Não tomou antiviral)
training_features_2[["behavioral_antiviral_meds"]][is.na(training_features_2[["behavioral_antiviral_meds"]])] <- 0
#behavioral_avoidance
#Considerarei os valores missing como 0 (Não se isolou)
training_features_2[["behavioral_avoidance"]][is.na(training_features_2[["behavioral_avoidance"]])] <- 0
#behavioral_face_mask
#Considerarei os valores missing como 0 (Não comprou máscara)
training_features_2[["behavioral_face_mask"]][is.na(training_features_2[["behavioral_face_mask"]])] <- 0
#behavioral_wash_hands
#Considerarei os valores missing como 0 (Não limpa as mãos com frequência)
training_features_2[["behavioral_wash_hands"]][is.na(training_features_2[["behavioral_wash_hands"]])] <- 0
#behavioral_large_gatherings
#Considerarei os valores missing como 0 (Não evitou grandes aglomerações)
training_features_2[["behavioral_large_gatherings"]][is.na(training_features_2[["behavioral_large_gatherings"]])] <- 0
#behavioral_outside_home
#Considerarei os valores missing como 0 (Não reduziu o contato com pessoas de fora de casa)
training_features_2[["behavioral_outside_home"]][is.na(training_features_2[["behavioral_outside_home"]])] <- 0
#behavioral_touch_face
#Considerarei os valores missing como 0 (Não evitou tocar o nariz, boca, olhos)
training_features_2[["behavioral_touch_face"]][is.na(training_features_2[["behavioral_touch_face"]])] <- 0
#doctor_recc_h1n1
#Considerarei os valores missing como 0 (Não foi recomendado por um médico a tomar vacina contra a H1N1)
training_features_2[["doctor_recc_h1n1"]][is.na(training_features_2[["doctor_recc_h1n1"]])] <- 0
#doctor_recc_seasonal
#Considerarei os valores missing como 0 (Não foi recomendado por um médico a tomar vacina contra a gripe)
training_features_2[["doctor_recc_seasonal"]][is.na(training_features_2[["doctor_recc_seasonal"]])] <- 0
#chronic_med_condition
#Considerarei os valores missing como 0 (Não tem doenças crônicas)
training_features_2[["chronic_med_condition"]][is.na(training_features_2[["chronic_med_condition"]])] <- 0
#child_under_6_months
#Considerarei os valores missing como 0 (Não tem contato com crianças abaixo de 6 meses de idade)
training_features_2[["child_under_6_months"]][is.na(training_features_2[["child_under_6_months"]])] <- 0
#health_worker
#Considerarei os valores missing como 0 (Não trabalha na área da saúde)
training_features_2[["health_worker"]][is.na(training_features_2[["health_worker"]])] <- 0
#health_insurance
#Considerarei os valores missing como 0 (Não tem convênio médico)
training_features_2[["health_insurance"]][is.na(training_features_2[["health_insurance"]])] <- 0
#opinion_h1n1_vacc_effective
#Considerarei os valores missing como 3 (Don't know - Não sabe se a vacina h1n1 é efetiva)
training_features_2[["opinion_h1n1_vacc_effective"]][is.na(training_features_2[["opinion_h1n1_vacc_effective"]])] <- 3
#opinion_h1n1_risk
#Considerarei os valores missing como 3 (Don't know - Não sabe se ficará doente se NÃO tomar a vacina h1n1)
training_features_2[["opinion_h1n1_risk"]][is.na(training_features_2[["opinion_h1n1_risk"]])] <- 3
#opinion_h1n1_sick_from_vacc
#Considerarei os valores missing como 3 (Don't know - Não sabe se ficará doente se (SIM) tomar a vacina h1n1)
training_features_2[["opinion_h1n1_sick_from_vacc"]][is.na(training_features_2[["opinion_h1n1_sick_from_vacc"]])] <- 3
#opinion_seas_vacc_effective
#Considerarei os valores missing como 3 (Don't know - Não sabe se a vacina da gripe é efetiva)
training_features_2[["opinion_seas_vacc_effective"]][is.na(training_features_2[["opinion_seas_vacc_effective"]])] <- 3
#opinion_seas_risk
#Considerarei os valores missing como 3 (Don't know - Não sabe se ficará doente se NÃO tomar a vacina da gripe)
training_features_2[["opinion_seas_risk"]][is.na(training_features_2[["opinion_seas_risk"]])] <- 3
#opinion_seas_sick_from_vacc
#Considerarei os valores missing como 3 (Don't know - Não sabe se ficará doente se (SIM) tomar a vacina da gripe)
training_features_2[["opinion_seas_sick_from_vacc"]][is.na(training_features_2[["opinion_seas_sick_from_vacc"]])] <- 3
#household_adults
#Considerarei os valores missing como 0 (Coniderarei que não mora com outros adultos)
training_features_2[["household_adults"]][is.na(training_features_2[["household_adults"]])] <- 0
#household_children
#Considerarei os valores missing como 0 (Coniderarei que não mora com outras crianças)
training_features_2[["household_children"]][is.na(training_features_2[["household_children"]])] <- 0
summary(training_features_2) #resumo geral da base
library(expss)
cro_rpct(training_features_2$h1n1_concern, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$h1n1_knowledge, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_antiviral_meds, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_avoidance, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_face_mask, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_wash_hands, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_large_gatherings, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_outside_home, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$behavioral_touch_face, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$doctor_recc_h1n1, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$doctor_recc_seasonal, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$chronic_med_condition, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$child_under_6_months, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$health_worker, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$health_insurance, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$opinion_h1n1_vacc_effective, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(opinion_h1n1_vacc_effective_CAT =
case_when(opinion_h1n1_vacc_effective %in% c(1,2) ~ '1+2',
opinion_h1n1_vacc_effective == 3 ~ '3',
opinion_h1n1_vacc_effective == 4 ~ '4',
opinion_h1n1_vacc_effective == 5 ~ '5'))
#nova variável opinion_h1n1_vacc_effective_CAT
cro_rpct(training_features_2$opinion_h1n1_vacc_effective_CAT, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$opinion_h1n1_risk, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$opinion_h1n1_sick_from_vacc, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(opinion_h1n1_sick_from_vacc_CAT =
case_when(opinion_h1n1_sick_from_vacc %in% c(2,3) ~ '2+3',
opinion_h1n1_sick_from_vacc == 1 ~ '1',
opinion_h1n1_sick_from_vacc %in% c(4,5) ~ '4+5'))
#nova variável opinion_h1n1_sick_from_vacc_CAT
cro_rpct(training_features_2$opinion_h1n1_sick_from_vacc_CAT, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$opinion_seas_vacc_effective, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$opinion_seas_risk, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$opinion_seas_sick_from_vacc, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(opinion_seas_sick_from_vacc_CAT =
case_when(opinion_seas_sick_from_vacc %in% c(1,4,5) ~ '1+4+5',
opinion_seas_sick_from_vacc == 2 ~ '2',
opinion_seas_sick_from_vacc == 3 ~ '3'))
#nova variável opinion_h1n1_sick_from_vacc_CAT
cro_rpct(training_features_2$opinion_seas_sick_from_vacc_CAT, training_features_2$h1n1_vaccine)
#não irei recategorizar agora, pois acredito que a idade já esteja recategorizada de forma que faz sentido.
cro_rpct(training_features_2$age_group, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$education, training_features_2$h1n1_vaccine)
#não irei recategorizar agora, pois acredito que a variável não faz muito sentido neste problema.
cro_rpct(training_features_2$race, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$sex, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$income_poverty, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(income_poverty_CAT =
case_when(income_poverty %in% c('','Below Poverty') ~ 'Below Poverty+Missing',
income_poverty == '> $75,000' ~ '> $75,000',
income_poverty == '<= $75,000, Above Poverty' ~ '<= $75,000, Above Poverty'))
#nova variável marital_status_CAT
cro_rpct(training_features_2$income_poverty_CAT, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$marital_status, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(marital_status_CAT =
case_when(marital_status %in% c('','Not Married') ~ 'Not Married+Missing',
marital_status == 'Married' ~ 'Married'))
#nova variável marital_status_CAT
cro_rpct(training_features_2$marital_status_CAT, training_features_2$h1n1_vaccine)
cro_rpct(training_features_2$rent_or_own, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$employment_status, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(employment_status_CAT =
case_when(employment_status %in% c('','Unempolyed') ~ 'Unempolyed+Missing',
employment_status == 'Employed' ~ 'Employed',
employment_status == 'Not in Labor Force' ~ 'Not in Labor Force'))
#nova variável employment_status_CAT
cro_rpct(training_features_2$employment_status_CAT, training_features_2$h1n1_vaccine)
#recategorizar
cro_rpct(training_features_2$hhs_geo_region, training_features_2$h1n1_vaccine)
training_features_2 <- training_features_2 %>% mutate(hhs_geo_region_CAT =
case_when(hhs_geo_region %in% c('kbazzjca','fpwskwrf','lrircsnp') ~ '2',
hhs_geo_region %in% c('atmpeygn','qufhixun','mlyzmhmf') ~ '3',
hhs_geo_region %in% c('dqpwygqj','lzgpxyit') ~ '1',
hhs_geo_region == 'oxchjgsf' ~ '4',
hhs_geo_region == 'bhuqouqj' ~ '5'))
#nova variável hhs_geo_region_CAT
cro_rpct(training_features_2$hhs_geo_region_CAT, training_features_2$h1n1_vaccine)
#Padronizacao da base
training_features_STD <- scale(training_features_2)
View(crime_US_std)
View(training_features_2)
View(training_features_STD)
#Padronizacao da base
training_features_STD <- scale(training_features_2)
View(training_features_STD)
#Padronizacao da base
training_features_STD <- scale(training_features_2)
#Clusterizacao da base
set.seed(123)
km.res <- kmeans(training_features, 4, nstart = 25)
########################################
########################################
############### PARTE 1 ################
########################################
########################################
############IMPORT DAS BASES############
#Set do diretório das bases de dados
setwd("C:\\Users\\HP\\Documents\\GitHub\\rstudio_preditct_h1n1_flu")
getwd()
options(scipen = 999)
#Import csv data
#Importa prob h1n1
prob_h1n1 <- read.csv(file = 'probabilidade_h1n1.csv')
colnames(prob_h1n1)[2] <- "h1n1_vaccine"
View(prob_h1n1)
#Importa prob h1n1
prob_seasonal <- read.csv(file = 'probabilidade_seasonal.csv')
colnames(prob_seasonal)[2] <- "seasonal_vaccine"
View(prob_seasonal)
#pacote para manipular dados no R,
#pois será necessário cruzar as variáveis explicativas com as variáveis resposta na base de treino
library(dplyr)
#Cruza as variáveis resposta com as variáveis explicativas, utilizando o respondent_id como chave
submission_df<-left_join(prob_h1n1,prob_seasonal,by="respondent_id")
View(submission_df)
write.csv(submission_df,"C:\\Users\\HP\\Desktop\\DrivenData\\predict_h1n1_flu\\submission_df.csv", row.names = FALSE)
